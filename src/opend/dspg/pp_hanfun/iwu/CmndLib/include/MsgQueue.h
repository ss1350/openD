//////////////////////////////////////////////////////////////////////////////
///	
///	@file		MsgQueue.h
///	@brief		This file provides API of abstract Message Queue
///
///	@internal
///	@author		Iurov Maxim
///	@date		20/12/2016
///	@version	version 1.0
///
///	Copyright (C) 2016 DSP GROUP, INC .   All Rights Reserved
///
///////////////////////////////////////////////////////////////////////////////

#ifndef _MSG_QUEUE_H_
#define _MSG_QUEUE_H_

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include "CmndLib_UserImpl_CritSect.h"
#include "CmndLib_UserImpl_Event.h"
#include "RingBuffer.h"
#include "CmndApiExported.h"
#include <string.h>

extern_c_begin

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#define STATIC_MSGQUEUE_BUFF_SIZE( items_count, item_size )  STATIC_RINGBUFFER_BUFF_SIZE( items_count, item_size )

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

typedef void( *t_pf_IdleProc )(void*);

/// A list of items
typedef struct 
{
	t_st_RingBuffer		st_RingBuffer;		//!< a ring buffer
	HEVENT				hEvent;
	HCRITICAL_SECTION	hCritSection;
	t_pf_IdleProc		pf_IdleProc;
	void*				pv_IdleTasksParam;
}
t_st_MsgQueue;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
///	@brief		Create a Message Queue object
///
///	@param[in]	u16_Capacity	- Maximum size of queue
///
/// @see		p_Queue_Close
///////////////////////////////////////////////////////////////////////////////
bool p_MsgQueue_Init( t_st_MsgQueue* pst_MsgQueue, u16 u16_Capacity, void* p_Buffer, u32 u32_BufferSize, t_pf_IdleProc pf_IdleTasks, void* pv_IdleProcParam );

///////////////////////////////////////////////////////////////////////////////
///	@brief		Destroy Message Queue object
///
///	@param[in]	pst_MsgQueue	- A pointer of object for destroying.
///
///	@return		None
///////////////////////////////////////////////////////////////////////////////
void p_MsgQueue_Destroy( t_st_MsgQueue* pst_MsgQueue );

///////////////////////////////////////////////////////////////////////////////
///	@brief		Push element to Queue
/// @note		If Buffer is full, overwrite first element
///
///	@param[in]	pst_MsgQueue		- A pointer of Message Queue.
///	@param[in]	pst_hanCmndApiMsg	- A pointer to Cmnd message.
///
///	@return		None
///////////////////////////////////////////////////////////////////////////////
void p_MsgQueue_Push( t_st_MsgQueue* pst_MsgQueue, const t_st_Msg* pst_hanCmndApiMsg );

///////////////////////////////////////////////////////////////////////////////
///	@brief		Pop element from Queue
///
///	@param[in]	pst_MsgQueue		- A pointer of Message Queue.
///	@param[in]	pst_hanCmndApiMsg	- A pointer to Cmnd message.
///
///	@return		true if success
///////////////////////////////////////////////////////////////////////////////
bool p_MsgQueue_Pop( t_st_MsgQueue* pst_MsgQueue, t_st_Msg* pst_hanCmndApiMsg );

///////////////////////////////////////////////////////////////////////////////
///	@brief		Wait for Expected message to appear within timeout
///
///	@param[in]	pst_MsgQueue		- A pointer of Message Queue.
///	@param[in]	u16_ExpServiceID	- Expected Message Service ID
///	@param[in]	u8_ExpCmndMsgID		- Expected Message ID
///	@param[in]	pst_hanCmndApiMsg	- A pointer to Cmnd message.
///	@param[in]	u32_TimeoutMs		- Timeout.
///
///	@return		true if success
///////////////////////////////////////////////////////////////////////////////
bool p_MsgQueue_Wait ( t_st_MsgQueue* pst_MsgQueue, u16 u16_ExpServiceID, u8 u8_ExpCmndMsgID, OUT t_st_Msg* pst_hanCmndApiMsg, u32 u32_TimeoutMs );

bool p_MsgQueue_WaitAny(t_st_MsgQueue* pst_MsgQueue, OUT t_st_Msg* pst_hanCmndApiMsg, u32 TimeoutMs);

///////////////////////////////////////////////////////////////////////////////
///	@brief		Clear Message Queue object
///
///	@param[in]	pst_MsgQueue	- A pointer of object for destroying.
///
///	@return		None
///////////////////////////////////////////////////////////////////////////////
void p_MsgQueue_Clear( t_st_MsgQueue* pst_MsgQueue );

extern_c_end

#endif //_MSG_QUEUE_H_
