///////////////////////////////////////////////////////////////////////////////////////////////////
///
///	@file		Smartlog.h
///	@brief		This file contains internal logging module API
///
/// @note		The definitions inside of this file will be active only if the _LOG_ENABLED is
///				defined. Usually this is done by Autoconf and placed in config.h file
///
///	@internal
///	@author		Kovalchuk Sergiy
///	@date		08/02/2008
///	@version	version 1.0
///
///	Copyright (C) 2008 DSP GROUP, INC .   All Rights Reserved
///
///////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _OSLITE_SMARTLOG_H
#define _OSLITE_SMARTLOG_H

#ifdef __cplusplus
extern "C" {
#endif

/// All the following functionality should be available only for debug versions of OsLite
/// To enable this use --enable-debug key for Autoconf configuration
#if defined(_LOG_ENABLED)
#include <stdio.h>

///////////////////////////////////////////////////////////////////////////////////////////////////
///	@brief		This enumeration contains error levels for logging module
///
///	@arg		LogFatal - fatal error, which leads to immediate termination of application
///	@arg		LogError - critical function of module has failed
/// @arg		LogWarning - warning of possible errors in future or unimplemented functionality
/// @arg		LogNotice - normal, but significant condition
/// @arg 		LogInfo - informational message
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef enum
{
	LogFatal,
	LogError,
	LogWarning,
	LogNotice,
	LogInfo
}
LogLevels;

/// This macro outputs general log message, using printf() format style
#define log_message(level, format, message...)	\
{ \
	static char _buffer[1024]; \
	snprintf(_buffer, sizeof(_buffer), format, ##message); \
	__logMessage(level, __FILE__, __LINE__, _buffer); \
}

/// This macro outputs generic error message with appropriate description. The error code should be
/// one of defined in errno.h or errno-base.h
#define log_genericerror(level, message, errorCode) \
	__logGenericError(level, __FILE__, __LINE__, message, errorCode);

///////////////////////////////////////////////////////////////////////////////////////////////////
///	@brief		This function is used by log_message and log_genericerror macroses to print the 
/// 			message into log file
///
///	@param[in]	_level - log level
/// @param[in]	_file - file name, generated by __FILE__ macro
/// @param[in]	_line - line in file, generated by __LINE__ macro
/// @param[in]	_message - log message itself
/// 
///	@return		None
/// 
/// @see 		log_message
/// @see 		log_genericerror
/// @see		LogLevels
///////////////////////////////////////////////////////////////////////////////////////////////////
void __logMessage(LogLevels _level, const char* _file, unsigned int _line, 
	const char* _message);

///////////////////////////////////////////////////////////////////////////////////////////////////
///	@brief		This function is used by log_genericerror macro to print the message with generic 
/// 			error code description into log file
///
///	@param[in]	_level - log level
/// @param[in]	_file - file name, generated by __FILE__ macro
/// @param[in]	_line - line in file, generated by __LINE__ macro
/// @param[in]	_message - log message
/// @param[in]	_errorCode - error code
/// 
///	@return		None
/// 
/// @see 		log_message
/// @see 		log_genericerror
/// @see		LogLevels
///////////////////////////////////////////////////////////////////////////////////////////////////
void __logGenericError(LogLevels _level, const char* _file, unsigned int _line, 
	const char* _message,int _errorCode);

///////////////////////////////////////////////////////////////////////////////////////////////////
///	@brief		This function initializes the logging module. It should be called from OSL_Init() 
/// 			function before initialization of all other modules
///
///	@param[in]	None
///	@return		None
/// 
/// @see 		OSL_Init
///////////////////////////////////////////////////////////////////////////////////////////////////
void InitLog();

///////////////////////////////////////////////////////////////////////////////////////////////////
///	@brief		This function de-initializes the logging module. It should be called from OSL_Deinit() 
/// 			function after deinitialization of all other modules
///
///	@param[in]	None
///	@return		None
/// 
/// @see 		OSL_Deinit
///////////////////////////////////////////////////////////////////////////////////////////////////
void DeinitLog();

#else
	
/// Pure stubs for smartlog macroses
#define log_message(level, format, message...)
#define log_genericerror(level, message, errorCode)

#endif /* _LOG_ENABLED */

#ifdef __cplusplus
}
#endif

#endif /* _OSLITE_SMARTLOG_H */
